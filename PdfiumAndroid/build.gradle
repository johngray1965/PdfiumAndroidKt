plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'io.legere.pdfiumandroid'
    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 34
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {


    implementation libs.kotlinx.coroutines.android


    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.truth
    androidTestImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.androidx.core.testing

}

def isReleaseBuild() {
    def version = findProperty('VERSION_NAME') ?: "1.0.0"
    return !version.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return  hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUrl() {
    return isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? getProperty('NEXUS_USERNAME') : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ?  getProperty('NEXUS_PASSWORD') : ""
}
publishing {
    publications {
        release(MavenPublication) {
            groupId = getProperty('GROUP')
            artifactId = getProperty('POM_ARTIFACT_ID')
            version = findProperty('VERSION_NAME')
            pom {

                name = 'PdfiumAndroid'
                packaging = getProperty('POM_PACKAGING')
                description = getProperty('POM_DESCRIPTION')
                url = getProperty('POM_URL')

                licenses {
                    license {
                        name = getProperty('POM_LICENCE_NAME')
                        url = getProperty('POM_LICENCE_URL')
                        distribution = getProperty('POM_LICENCE_DIST')
                    }
                }
                developers {
                    developer {
                        id = getProperty('POM_DEVELOPER_ID')
                        name = getProperty('POM_DEVELOPER_NAME')
                    }
                }
                scm {
                    url = getProperty('POM_SCM_URL')
                    connection = getProperty('POM_SCM_CONNECTION')
                    developerConnection = getProperty('POM_SCM_DEV_CONNECTION')
                }
            }

            afterEvaluate {
                from components.release
            }
        }

    }
    repositories {
        maven {
            //url = uri("https://maven.pkg.github.com/johngray1965/PdfiumAndroidKt")
            url = getRepositoryUrl()
            credentials {
                username = getRepositoryUsername()// project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                password = getRepositoryPassword() //project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

signing {
    sign publishing.publications.release
}

afterEvaluate {
    publishing {
        publications {
            mavenRelease(MavenPublication) {
                from components.release
            }
        }
    }
}


